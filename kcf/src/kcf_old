#include <opencv2/core/utility.hpp>
#include <opencv2/tracking.hpp>
#include <opencv2/videoio.hpp>
#include <opencv2/highgui.hpp>
#include <iostream>
#include <cstring>
#include <ros/ros.h>
#include<geometry_msgs/PoseStamped.h>
#include <ros/callback_queue.h>
#include <mavros_msgs/CommandBool.h>
#include <mavros_msgs/SetMode.h>
#include <mavros_msgs/State.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>

using namespace std;
using namespace cv;
/*
mavros_msgs::State current_state;
void state_cb(const mavros_msgs::State::ConstPtr& msg){
    current_state = *msg;
}*/

geometry_msgs::PoseStamped msg2;
void poseMessageReceived(const geometry_msgs::PoseStamped& msg){

//ROS_INFO_STREAM("Ohoo");
msg2=msg;
/*
int count =1;
ros::Rate rate(100);
while(ros::ok){

msg2.header.stamp=ros::Time::now();
msg2.header.seq=count;
msg2.header.frame_id=1;
msg2.pose.position.x=msg.pose.position.x;
msg2.pose.position.y=0;
msg2.pose.position.z=5;
msg2.pose.orientation.x=0;
msg2.pose.orientation.y=0;
msg2.pose.orientation.z=0;
msg2.pose.orientation.w=1;

pub->publish(msg2);
ros::spinOnce();
count++;
rate.sleep();
*/
}

int main( int argc, char** argv ){
  
  // declares all required variables
  ros::init(argc, argv,"kcf");

  ros::NodeHandle nh;

  ros::Publisher p1=nh.advertise<geometry_msgs::PoseStamped>("/mavros/setpoint_position/local",10);
  image_transport::Publisher pub = it.advertise("image", 10);
  ros::Subscriber sub = nh.subscribe("/mavros/local_position/pose", 5 ,&poseMessageReceived); //It was 10.
  ros::Rate rate(20);
/*
  ros::Subscriber state_sub = nh.subscribe<mavros_msgs::State>
            ("mavros/state", 10, state_cb);
    ros::ServiceClient arming_client = nh.serviceClient<mavros_msgs::CommandBool>
            ("mavros/cmd/arming");
    ros::ServiceClient set_mode_client = nh.serviceClient<mavros_msgs::SetMode>
            ("mavros/set_mode");
    
    
  
  

    while(ros::ok() && current_state.connected){
        ros::spinOnce();
        rate.sleep();
    }

  
    geometry_msgs::PoseStamped pose;
    pose.pose.position.x = 0;
    pose.pose.position.y = 0;
    pose.pose.position.z = 2;

    //send a few setpoints before starting
    for(int i = 100; ros::ok() && i > 0; --i){
        p1.publish(pose);
        ros::spinOnce();
        rate.sleep();
    }

    mavros_msgs::SetMode offb_set_mode;
    offb_set_mode.request.custom_mode = "OFFBOARD";

    mavros_msgs::CommandBool arm_cmd;
    arm_cmd.request.value = true;

    ros::Time last_request = ros::Time::now();
  */
  //ros::spinOnce();
  geometry_msgs::PoseStamped msg;
   sensor_msgs::ImagePtr msg3;
  //cout<<sub<<endl;
  
  Rect2d roi;
  Mat frame;
  // create a tracker object
  Ptr<Tracker> tracker = Tracker::create( "KCF" );
  // set input video
  //std::string video = argv[1];
  VideoCapture cap(0);//video);
  
   int frame_width=   cap.get(CV_CAP_PROP_FRAME_WIDTH);
   int frame_height=   cap.get(CV_CAP_PROP_FRAME_HEIGHT);
   VideoWriter video("out.avi",CV_FOURCC('M','J','P','G'),30, Size(frame_width,frame_height),true);

  // get bounding box
  cap >> frame;
  roi=selectROI("tracker",frame);
  //quit if ROI was not selected
  if(roi.width==0 || roi.height==0)
    return 0;
  // initialize the tracker
  tracker->init(frame,roi);
  // perform the tracking process
  printf("Start the tracking process, press ESC to quit.\n");
//  for ( ;; )
  //msg.pose.position.x=0;
  //msg.pose.position.y=0;
  while(ros::ok){
    /*if( current_state.mode != "OFFBOARD" &&
            (ros::Time::now() - last_request > ros::Duration(5.0))){
            if( set_mode_client.call(offb_set_mode) &&
                offb_set_mode.response.success){
                ROS_INFO("Offboard enabled");
            }
            last_request = ros::Time::now();
        } else {
            if( !current_state.armed &&
                (ros::Time::now() - last_request > ros::Duration(5.0))){
                if( arming_client.call(arm_cmd) &&
                    arm_cmd.response.success){
                    ROS_INFO("Vehicle armed");
                }
                last_request = ros::Time::now();
            }
        }*/

    // get frame from the video
    cap >> frame;
    // stop the program if no more images
    if(frame.rows==0 || frame.cols==0)
      break;
    // update the tracking result
    tracker->update(frame,roi);
    // draw the tracked object
    rectangle( frame, roi, Scalar( 255, 0, 0 ), 2, 1 );
    ros::spinOnce();
    // show image with the tracked object
    msg.header.stamp=ros::Time::now();

    msg.header.frame_id=1;
    msg.pose.position.x=-(msg2.pose.position.z*(roi.y + (roi.height/2) - 254.254455)/598.04)+ msg2.pose.position.x;//-(msg2.pose.position.z*(roi.x + (roi.width/2) - 345.036)/599.03) + msg2.pose.position.x;
    msg.pose.position.y=0;//-(msg2.pose.position.z*(roi.x + (roi.width/2) - 345.036)/599.03) + msg2.pose.position.y;//(msg2.pose.position.z*(roi.y + (roi.height/2) - 254.254455)/598.04)+ msg2.pose.position.y;
    msg.pose.position.z=5;//msg2.pose.position.z;//roi.x;//((170*578.25)/roi.width);
    msg.pose.orientation.x=0;
    msg.pose.orientation.y=0;
    msg.pose.orientation.z=0;
    msg.pose.orientation.w=1;
    p1.publish(msg);
    //video.write(frame);
    msg = cv_bridge::CvImage(std_msgs::Header(), "bgr8", image).toImageMsg();
    pub.publish(msg)
    imshow("tracker",frame);
    rate.sleep();
    //quit on ESC button
    if(waitKey(1)==27)break;
  }
  return 0;
}
