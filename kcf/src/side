    #include <ros/ros.h>
    #include <image_transport/image_transport.h>
    #include <opencv2/highgui/highgui.hpp>
    #include <cv_bridge/cv_bridge.h>
    #include <sstream> // for converting the command line parameter to integer
    #include <opencv2/core/utility.hpp>
   #include <opencv2/tracking.hpp>
   #include <opencv2/videoio.hpp>
   #include <opencv2/highgui.hpp>
   #include <iostream>
   #include <cstring>
  using namespace std;
  using namespace cv;
    int main(int argc, char** argv)
    {
      // Check if video source has been passed as a parameter
     //if(argv[1] == NULL) return 1;
   
     ros::init(argc, argv, "kcf");
    ros::NodeHandle nh;
     image_transport::ImageTransport it(nh);
     image_transport::Publisher pub = it.advertise("hi", 1);
   
     // Convert the passed as command line parameter index for the video device to an integer
     /*std::istringstream video_sourceCmd(argv[1]);
     int video_source;
     // Check if it is indeed a number
     if(!(video_sourceCmd >> video_source)) return 1;*/
       Ptr<Tracker> tracker = Tracker::create( "KCF" );
     cv::VideoCapture cap(0);//video_source);
     // Check if video device can be opened with the given index
     if(!cap.isOpened()) return 1;
     cv::Mat frame;
       Rect2d roi;
     sensor_msgs::ImagePtr msg;
   
     ros::Rate loop_rate(50);
     cap>>frame;
       roi=selectROI("tracker",frame);
     
        tracker->init(frame,roi);
    while (nh.ok()) {
       cap >> frame;
       // Check if grabbed frame is actually full with some content
       tracker->update(frame,roi);
    // draw the tracked object
    rectangle( frame, roi, Scalar( 255, 0, 0 ), 2, 1 );
    // show image with the tracked object
    imshow("tracker",frame);
       if(!frame.empty()) {
         msg = cv_bridge::CvImage(std_msgs::Header(), "bgr8", frame).toImageMsg();
         pub.publish(msg);
         //cv::waitKey(1);
       if(waitKey(1)==27)break;
       }
   
       ros::spinOnce();
       loop_rate.sleep();
     }
   }
